{"ast":null,"code":"import { DateTime } from \"luxon\";\nconst API_KEY = \"1fa9ff4126d95b8db54f3897a208e91c\";\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\";\nconst GetWeatherData = (InfoType, SearchParams) => {\n  const url = new URL(BASE_URL + \"/\" + InfoType);\n  url.search = new URLSearchParams({\n    ...SearchParams,\n    appid: API_KEY\n  });\n\n  //   console.log(url);\n  return fetch(url).then(res => res.json());\n  //  .then((data) => data)\n};\n_c = GetWeatherData;\nconst FormatCurrentWeather = data => {\n  const {\n    coord: {\n      lat,\n      lon\n    },\n    main: {\n      temp,\n      feels_like,\n      temp_min,\n      temp_max,\n      humidity\n    },\n    name,\n    dt,\n    sys: {\n      country,\n      sunrise,\n      sunset\n    },\n    weather,\n    wind: {\n      speed\n    }\n  } = data;\n  const {\n    main: details,\n    icon\n  } = weather[0];\n  return {\n    lat,\n    lon,\n    temp,\n    feels_like,\n    temp_min,\n    temp_max,\n    humidity,\n    name,\n    dt,\n    country,\n    sunrise,\n    sunset,\n    weather,\n    details,\n    icon,\n    speed\n  };\n};\n_c2 = FormatCurrentWeather;\nconst FormatForecastWeather = data => {\n  let {\n    timezone,\n    daily,\n    hourly\n  } = data;\n  daily = daily.slice(1, 6).map(d => {\n    return {\n      title: FormatToLocalTime(d.dt, timezone, \"ccc\"),\n      temp: d.temp.day,\n      icon: d.weather[0].icon\n    };\n  });\n  hourly = hourly.slice(1, 6).map(d => {\n    return {\n      title: FormatToLocalTime(d.dt, timezone, \"hh:mm a\"),\n      temp: d.temp,\n      icon: d.weather[0].icon\n    };\n  });\n  return {\n    timezone,\n    daily,\n    hourly\n  };\n};\n_c3 = FormatForecastWeather;\nconst GetFormattedWeatherData = async SearchParams => {\n  const FormattedCurrentWeather = await GetWeatherData(\"weather\", SearchParams).then(FormatCurrentWeather);\n  const {\n    lat,\n    lon\n  } = FormattedCurrentWeather;\n  const FormattedForecastWeather = await GetWeatherData(\"onecall\", {\n    lat,\n    lon,\n    exclude: \"current,minutely,alerts\",\n    units: SearchParams.units\n  }).then(FormatForecastWeather);\n  return {\n    ...FormattedCurrentWeather,\n    ...FormattedForecastWeather\n  };\n};\n_c4 = GetFormattedWeatherData;\nconst FormatToLocalTime = function (secs, zone) {\n  let format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\";\n  return DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\n};\n_c5 = FormatToLocalTime;\nconst IconUrlFromCode = code => `http://openweathermap.org/img/wn/${code}@2x.png`;\n_c6 = IconUrlFromCode;\nexport default GetFormattedWeatherData;\nexport { FormatToLocalTime, IconUrlFromCode };\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"GetWeatherData\");\n$RefreshReg$(_c2, \"FormatCurrentWeather\");\n$RefreshReg$(_c3, \"FormatForecastWeather\");\n$RefreshReg$(_c4, \"GetFormattedWeatherData\");\n$RefreshReg$(_c5, \"FormatToLocalTime\");\n$RefreshReg$(_c6, \"IconUrlFromCode\");","map":{"version":3,"names":["DateTime","API_KEY","BASE_URL","GetWeatherData","InfoType","SearchParams","url","URL","search","URLSearchParams","appid","fetch","then","res","json","FormatCurrentWeather","data","coord","lat","lon","main","temp","feels_like","temp_min","temp_max","humidity","name","dt","sys","country","sunrise","sunset","weather","wind","speed","details","icon","FormatForecastWeather","timezone","daily","hourly","slice","map","d","title","FormatToLocalTime","day","GetFormattedWeatherData","FormattedCurrentWeather","FormattedForecastWeather","exclude","units","secs","zone","format","fromSeconds","setZone","toFormat","IconUrlFromCode","code"],"sources":["/Users/akshatnahata/Downloads/Weather-App-main/src/Services/WeatherService.js"],"sourcesContent":["import { DateTime } from \"luxon\";\r\n\r\nconst API_KEY = \"1fa9ff4126d95b8db54f3897a208e91c\";\r\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\";\r\n\r\n\r\nconst GetWeatherData = (InfoType, SearchParams) => {\r\n  const url = new URL(BASE_URL + \"/\" + InfoType);\r\n  url.search = new URLSearchParams({ ...SearchParams, appid: API_KEY });\r\n\r\n  //   console.log(url);\r\n  return fetch(url).then((res) => res.json());\r\n  //  .then((data) => data)\r\n};\r\nconst FormatCurrentWeather = (data) => {\r\n  const {\r\n    coord: { lat, lon },\r\n    main: { temp, feels_like, temp_min, temp_max, humidity },\r\n    name,\r\n    dt,\r\n    sys: { country, sunrise, sunset },\r\n    weather,\r\n    wind: { speed },\r\n  } = data;\r\n\r\n  const { main: details, icon } = weather[0];\r\n\r\n  return {\r\n    lat,\r\n    lon,\r\n    temp,\r\n    feels_like,\r\n    temp_min,\r\n    temp_max,\r\n    humidity,\r\n    name,\r\n    dt,\r\n    country,\r\n    sunrise,\r\n    sunset,\r\n    weather,\r\n    details,\r\n    icon,\r\n    speed,\r\n  };\r\n};\r\n\r\nconst FormatForecastWeather = (data) => {\r\n  let { timezone, daily, hourly } = data;\r\n  daily = daily.slice(1, 6).map((d) => {\r\n    return {\r\n      title: FormatToLocalTime(d.dt, timezone, \"ccc\"),\r\n      temp: d.temp.day,\r\n      icon: d.weather[0].icon,\r\n    };\r\n  });\r\n  hourly = hourly.slice(1, 6).map((d) => {\r\n    return {\r\n      title: FormatToLocalTime(d.dt, timezone, \"hh:mm a\"),\r\n      temp: d.temp,\r\n      icon: d.weather[0].icon,\r\n    };\r\n  });\r\n  return { timezone, daily, hourly };\r\n};\r\n\r\nconst GetFormattedWeatherData = async (SearchParams) => {\r\n  const FormattedCurrentWeather = await GetWeatherData(\r\n    \"weather\",\r\n    SearchParams\r\n  ).then(FormatCurrentWeather);\r\n\r\n  const { lat, lon } = FormattedCurrentWeather;\r\n\r\n  const FormattedForecastWeather = await GetWeatherData(\"onecall\", \r\n  {\r\n    lat,\r\n    lon,\r\n    exclude: \"current,minutely,alerts\",\r\n    units: SearchParams.units,\r\n  }).then(FormatForecastWeather);\r\n\r\n  return { ...FormattedCurrentWeather, ...FormattedForecastWeather };\r\n};\r\n\r\nconst FormatToLocalTime = (\r\n  secs,\r\n  zone,\r\n  format = \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\"\r\n) => DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\r\n\r\nconst IconUrlFromCode = (code) =>\r\n  `http://openweathermap.org/img/wn/${code}@2x.png`;\r\n\r\nexport default GetFormattedWeatherData;\r\n\r\nexport { FormatToLocalTime, IconUrlFromCode };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}